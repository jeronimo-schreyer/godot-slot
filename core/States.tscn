[gd_scene load_steps=3 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

var current
var next

onready var states = {
	\"main\" : preload(\"res://estados/main.tscn\"),
	\"bonus\" : preload(\"res://estados/bonus.tscn\"),
	\"freespin\": preload(\"res://estados/freespin.tscn\"),
	\"doubleup\" : preload(\"res://estados/double up.tscn\"),
}

# Called when the node enters the scene tree for the first time.
func _ready():
	if states.size() > 0:
		next = states[states.keys()[0]]
		enter_state()

func enter_state():
	if current != null:
		current.queue_free()
	
	current = next.instance()
	current.fsm = self
	current.enter()
	add_child(current)

func switch_state(state):
	next = states[state]

func exit_state():
	if next != null:
		enter_state()

func send_request():
	pass

func http_finished(request):
	pass
	#switch_state(request.result.NEXT_STATE)


func http_error(responseCode):
	print(\"HTTP Error, response code:\" + responseCode)
"

[sub_resource type="GDScript" id=2]
script/source = "extends HTTPRequest

signal finished
signal error

const ENDPOINT = \"http://jeronimoschreyer.me/slot-server/public/\"

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

func send(action, parameters=[]):
	if parameters.size() > 0:
		action = action + \"?\"
		for i in range(parameters.size()):
			action = action + parameters[i].keys()[0] + \"=\" + parameters[i].values()[0] + \"&\"
		action = action.substr(0, action.length() - 1)
	request(ENDPOINT + action)
	return self

func handler(result, response_code, headers, body):
	var json
	match response_code:
		200:
			json = JSON.parse(body.get_string_from_utf8())
			emit_signal(\"finished\", json)
		_:
			emit_signal(\"error\", response_code)
"

[node name="States" type="Node"]
script = SubResource( 1 )

[node name="HTTPRequest" type="HTTPRequest" parent="."]
script = SubResource( 2 )
[connection signal="error" from="HTTPRequest" to="." method="http_error"]
[connection signal="finished" from="HTTPRequest" to="." method="http_finished"]
[connection signal="request_completed" from="HTTPRequest" to="HTTPRequest" method="handler"]
